// <auto-generated />
using System;
using CharacterRoller.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharacterRoller.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190815110143_fourth")]
    partial class fourth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharacterRoller.Models.Ability", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseValue");

                    b.Property<bool>("Proficient");

                    b.Property<string>("parentCharacterId");

                    b.HasKey("Id");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("CharacterRoller.Models.Character", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcrobaticsId");

                    b.Property<string>("ArcanaId");

                    b.Property<string>("AthleticsId");

                    b.Property<string>("CharismaId");

                    b.Property<string>("ConstitutionId");

                    b.Property<string>("DeceptionId");

                    b.Property<string>("DexterityId");

                    b.Property<int>("Experience");

                    b.Property<string>("HistoryId");

                    b.Property<string>("InsightId");

                    b.Property<string>("IntelligenceId");

                    b.Property<string>("IntimidationId");

                    b.Property<string>("InvestigationId");

                    b.Property<int>("Level");

                    b.Property<string>("MedicineId");

                    b.Property<string>("NatureId");

                    b.Property<string>("PerceptionId");

                    b.Property<string>("PerformanceId");

                    b.Property<string>("PersuasionId");

                    b.Property<string>("ReligionId");

                    b.Property<string>("StealthId");

                    b.Property<string>("StrengthId");

                    b.Property<string>("SuvivalId");

                    b.Property<string>("WisdomId");

                    b.Property<string>("animalHandlingId");

                    b.Property<string>("characterClassId");

                    b.Property<string>("characterRaceId");

                    b.Property<string>("sleightOfHandId");

                    b.HasKey("Id");

                    b.HasIndex("AcrobaticsId");

                    b.HasIndex("ArcanaId");

                    b.HasIndex("AthleticsId");

                    b.HasIndex("CharismaId");

                    b.HasIndex("ConstitutionId");

                    b.HasIndex("DeceptionId");

                    b.HasIndex("DexterityId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("InsightId");

                    b.HasIndex("IntelligenceId");

                    b.HasIndex("IntimidationId");

                    b.HasIndex("InvestigationId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("NatureId");

                    b.HasIndex("PerceptionId");

                    b.HasIndex("PerformanceId");

                    b.HasIndex("PersuasionId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("StealthId");

                    b.HasIndex("StrengthId");

                    b.HasIndex("SuvivalId");

                    b.HasIndex("WisdomId");

                    b.HasIndex("animalHandlingId");

                    b.HasIndex("characterClassId");

                    b.HasIndex("characterRaceId");

                    b.HasIndex("sleightOfHandId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterRoller.Models.Class", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CharacterRoller.Models.ClassFeature", b =>
                {
                    b.Property<string>("classFeatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassId");

                    b.Property<string>("Feature");

                    b.Property<int>("Level");

                    b.Property<bool>("choice");

                    b.HasKey("classFeatureId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassFeatures");
                });

            modelBuilder.Entity("CharacterRoller.Models.Race", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharismaImprovement");

                    b.Property<int>("ConstitutionImprovement");

                    b.Property<int>("DexterityImprovement");

                    b.Property<int>("IntelligenceImprovement");

                    b.Property<int>("StrenghtImprovement");

                    b.Property<int>("WisdomImprovement");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new { Id = "Human", CharismaImprovement = 1, ConstitutionImprovement = 1, DexterityImprovement = 1, IntelligenceImprovement = 1, StrenghtImprovement = 1, WisdomImprovement = 1 },
                        new { Id = "Human(variant)", CharismaImprovement = 0, ConstitutionImprovement = 0, DexterityImprovement = 0, IntelligenceImprovement = 0, StrenghtImprovement = 0, WisdomImprovement = 0 }
                    );
                });

            modelBuilder.Entity("CharacterRoller.Models.RaceFeature", b =>
                {
                    b.Property<string>("raceFeatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Feature");

                    b.Property<string>("race");

                    b.HasKey("raceFeatureId");

                    b.ToTable("RaceFeatures");

                    b.HasData(
                        new { raceFeatureId = "HumanAbilities", Feature = "Your Ability Scores each increase by 1.", race = "Human" },
                        new { raceFeatureId = "HumanAge", Feature = "Humans reach Adulthood in their late teens and live less than a century.", race = "Human" },
                        new { raceFeatureId = "HumanAlignment", Feature = "Humans tend toward no particular Alignment. The best and the worst are found among them.", race = "Human" },
                        new { raceFeatureId = "HumanSize", Feature = "Humans vary widely in height and build, from barely 5 feet to well over 6 feet tall. Regardless of your position in that range, your size is Medium.", race = "Human" },
                        new { raceFeatureId = "HumanSpeed", Feature = "Your base walking speed is 30 feet.", race = "Human" },
                        new { raceFeatureId = "HumanLanguages", Feature = "You can speak, read, and write Common and one extra language of your choice. Humans typically learn the Languages of other peoples they deal with, including obscure dialects. They are fond of sprinkling their Speech with words borrowed from other tongues: Orc curses, Elvish musical expressions, Dwarvish Military phrases, and so on.", race = "Human" },
                        new { raceFeatureId = "Human(variant)Abilities", Feature = "Two different ability scores of your choice increase by 1.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Skills", Feature = "You gain proficiency in one skill of your choice.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Feat", Feature = "You gain one Feat of your choice.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Age", Feature = "Humans reach Adulthood in their late teens and live less than a century.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Alignment", Feature = "Humans tend toward no particular Alignment. The best and the worst are found among them.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Size", Feature = "Humans vary widely in height and build, from barely 5 feet to well over 6 feet tall. Regardless of your position in that range, your size is Medium.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Speed", Feature = "Your base walking speed is 30 feet.", race = "Human(variant)" },
                        new { raceFeatureId = "Human(variant)Languages", Feature = "You can speak, read, and write Common and one extra language of your choice. Humans typically learn the Languages of other peoples they deal with, including obscure dialects. They are fond of sprinkling their Speech with words borrowed from other tongues: Orc curses, Elvish musical expressions, Dwarvish Military phrases, and so on.", race = "Human(variant)" }
                    );
                });

            modelBuilder.Entity("CharacterRoller.Models.Skill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Expertise");

                    b.Property<bool>("Proficient");

                    b.Property<string>("parentAbilityId");

                    b.Property<string>("parentCharacterId");

                    b.HasKey("Id");

                    b.HasIndex("parentAbilityId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CharacterRoller.Models.Character", b =>
                {
                    b.HasOne("CharacterRoller.Models.Skill", "Acrobatics")
                        .WithMany()
                        .HasForeignKey("AcrobaticsId");

                    b.HasOne("CharacterRoller.Models.Skill", "Arcana")
                        .WithMany()
                        .HasForeignKey("ArcanaId");

                    b.HasOne("CharacterRoller.Models.Skill", "Athletics")
                        .WithMany()
                        .HasForeignKey("AthleticsId");

                    b.HasOne("CharacterRoller.Models.Ability", "Charisma")
                        .WithMany()
                        .HasForeignKey("CharismaId");

                    b.HasOne("CharacterRoller.Models.Ability", "Constitution")
                        .WithMany()
                        .HasForeignKey("ConstitutionId");

                    b.HasOne("CharacterRoller.Models.Skill", "Deception")
                        .WithMany()
                        .HasForeignKey("DeceptionId");

                    b.HasOne("CharacterRoller.Models.Ability", "Dexterity")
                        .WithMany()
                        .HasForeignKey("DexterityId");

                    b.HasOne("CharacterRoller.Models.Skill", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId");

                    b.HasOne("CharacterRoller.Models.Skill", "Insight")
                        .WithMany()
                        .HasForeignKey("InsightId");

                    b.HasOne("CharacterRoller.Models.Ability", "Intelligence")
                        .WithMany()
                        .HasForeignKey("IntelligenceId");

                    b.HasOne("CharacterRoller.Models.Skill", "Intimidation")
                        .WithMany()
                        .HasForeignKey("IntimidationId");

                    b.HasOne("CharacterRoller.Models.Skill", "Investigation")
                        .WithMany()
                        .HasForeignKey("InvestigationId");

                    b.HasOne("CharacterRoller.Models.Skill", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("CharacterRoller.Models.Skill", "Nature")
                        .WithMany()
                        .HasForeignKey("NatureId");

                    b.HasOne("CharacterRoller.Models.Skill", "Perception")
                        .WithMany()
                        .HasForeignKey("PerceptionId");

                    b.HasOne("CharacterRoller.Models.Skill", "Performance")
                        .WithMany()
                        .HasForeignKey("PerformanceId");

                    b.HasOne("CharacterRoller.Models.Skill", "Persuasion")
                        .WithMany()
                        .HasForeignKey("PersuasionId");

                    b.HasOne("CharacterRoller.Models.Skill", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("CharacterRoller.Models.Skill", "Stealth")
                        .WithMany()
                        .HasForeignKey("StealthId");

                    b.HasOne("CharacterRoller.Models.Ability", "Strength")
                        .WithMany()
                        .HasForeignKey("StrengthId");

                    b.HasOne("CharacterRoller.Models.Skill", "Suvival")
                        .WithMany()
                        .HasForeignKey("SuvivalId");

                    b.HasOne("CharacterRoller.Models.Ability", "Wisdom")
                        .WithMany()
                        .HasForeignKey("WisdomId");

                    b.HasOne("CharacterRoller.Models.Skill", "animalHandling")
                        .WithMany()
                        .HasForeignKey("animalHandlingId");

                    b.HasOne("CharacterRoller.Models.Class", "characterClass")
                        .WithMany()
                        .HasForeignKey("characterClassId");

                    b.HasOne("CharacterRoller.Models.Race", "characterRace")
                        .WithMany()
                        .HasForeignKey("characterRaceId");

                    b.HasOne("CharacterRoller.Models.Skill", "sleightOfHand")
                        .WithMany()
                        .HasForeignKey("sleightOfHandId");
                });

            modelBuilder.Entity("CharacterRoller.Models.ClassFeature", b =>
                {
                    b.HasOne("CharacterRoller.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("CharacterRoller.Models.Skill", b =>
                {
                    b.HasOne("CharacterRoller.Models.Ability", "parentAbility")
                        .WithMany()
                        .HasForeignKey("parentAbilityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
